package mon;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.*;
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.filter.CompareFilter;
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;
import org.apache.hadoop.hbase.util.Bytes;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class TestForHbase {
   private Configuration conf;
   private Connection conn;
   private Admin admin;
  @Before
   public void init() throws Exception {
      conf = HBaseConfiguration.create();
      String confDir = System.getProperty("user.dir") + File.separator + "conf";
      conf.set("hbase.zookeeper.quorum","s100");
      conf.set("hbase.zookeeper.property.clientPort","24002");
      conf.addResource(confDir + File.separator + "hbase-site.xml");
      conf.addResource(confDir + File.separator + "core-site.xml");
      conf.addResource(confDir + File.separator + "hdfs-site.xml");
      conn = ConnectionFactory.createConnection(conf);
      admin = conn.getAdmin();
   }
   @Test
   public void createTable() throws Exception {
       TableName tableName = TableName.valueOf("student");
       HTableDescriptor htd = new HTableDescriptor(tableName);
       HColumnDescriptor hcd = new HColumnDescriptor("bases");
       HColumnDescriptor hcd1 = new HColumnDescriptor("others");
       htd.addFamily(hcd);
       htd.addFamily(hcd1);
       admin.createTable(htd);
       System.out.println("ok");
   }
   @Test
   public void modifyTable() throws Exception {
      TableName tableName = TableName.valueOf("student");
      HTableDescriptor htd = admin.getTableDescriptor(tableName);
     if(!htd.hasFamily(Bytes.toBytes("interest"))){
         HColumnDescriptor hcd = new HColumnDescriptor("interest");
         htd.addFamily(hcd);
         admin.disableTable(tableName);
         admin.modifyTable(tableName,htd);
         admin.enableTable(tableName);
         System.out.println("ok");
   }
  }
   @Test
   public void deleteTable() throws Exception {
      TableName tableName = TableName.valueOf("student");
      admin.disableTable(tableName);
      admin.deleteTable(tableName);
       System.out.println("ok");
   }
   @Test
   public void putData() throws Exception {
       TableName tableName = TableName.valueOf("student");
       Table table = conn.getTable(tableName);
       List<Put> list = new ArrayList<Put>();
       Put put = new Put(Bytes.toBytes("A001"));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("name"),Bytes.toBytes("Liu siyang"));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("sex"),Bytes.toBytes("mela"));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("age"),Bytes.toBytes(24));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("address"),Bytes.toBytes("xi an"));
       list.add(put);

       put = new Put(Bytes.toBytes("A002"));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("name"),Bytes.toBytes("Liu shiyang"));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("sex"),Bytes.toBytes("famela"));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("age"),Bytes.toBytes(25));
       put.addColumn(Bytes.toBytes("bases"),Bytes.toBytes("address"),Bytes.toBytes("xi anaaa"));
       list.add(put);
       table.put(list);
       System.out.println("ok");
   }
   @Test
    public void deleteData() throws IOException {
      TableName tableName = TableName.valueOf("student");
      Table table = conn.getTable(tableName);
      Delete delete = new Delete(Bytes.toBytes("A001"));
      delete.addColumns(Bytes.toBytes("bases"),Bytes.toBytes("sex"));
      table.delete(delete);
       System.out.println("ok");
   }
   @Test
   public void scanData() throws Exception {
      TableName tableName = TableName.valueOf("student");
      Table table = conn.getTable(tableName);
      Scan scan = new Scan();
      ResultScanner rs = table.getScanner(scan);
      Iterator<Result> it = rs.iterator();
      while (it.hasNext()){
          Result r = it.next();
          byte[] rowkey = r.getRow();
          String name = Bytes.toString(r.getValue(Bytes.toBytes("bases"),Bytes.toBytes("name")));
          String sex = Bytes.toString(r.getValue(Bytes.toBytes("bases"),Bytes.toBytes("sex")));
          System.out.println(name + sex + Bytes.toString(rowkey));
      }
   }
   @Test
   public void  getData() throws Exception {
      TableName tableName = TableName.valueOf("student");
      Table table = conn.getTable(tableName);
      Get get = new Get(Bytes.toBytes("A002"));
      Result r = table.get(get);
      String name = Bytes.toString(r.getValue(Bytes.toBytes("bases"),Bytes.toBytes("name")));
      String sex = Bytes.toString(r.getValue(Bytes.toBytes("bases"),Bytes.toBytes("sex")));
      System.out.println(name + sex);
   }
   @Test
   public void filterData() throws Exception {
      TableName tableName = TableName.valueOf("student");
      Table table = conn.getTable(tableName);
      Scan scan = new Scan(Bytes.toBytes("A001"),Bytes.toBytes("A003"));
       SingleColumnValueFilter sf = new SingleColumnValueFilter(Bytes.toBytes("bases"),Bytes.toBytes("name"), CompareFilter.CompareOp.EQUAL,Bytes.toBytes("Liu siyang"));
       scan.setFilter(sf);
       ResultScanner rs = table.getScanner(scan);
       Iterator<Result> it = rs.iterator();
       while (it.hasNext()){
           Result r = it.next();
           System.out.println(r);
           System.out.println("ok");
       }
   }
   @Test
    public void testFilter() throws IOException {
      TableName tableName = TableName.valueOf("student");
      Table table = conn.getTable(tableName);

   }

}
